//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `devices.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Devices;

public class LensPosition implements java.lang.Cloneable,
                                     java.io.Serializable
{
    public Zoom zoom;

    public int transX;

    public int transY;

    public LensPosition()
    {
        this.zoom = Zoom.zoom1x;
    }

    public LensPosition(Zoom zoom, int transX, int transY)
    {
        this.zoom = zoom;
        this.transX = transX;
        this.transY = transY;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        LensPosition r = null;
        if(rhs instanceof LensPosition)
        {
            r = (LensPosition)rhs;
        }

        if(r != null)
        {
            if(this.zoom != r.zoom)
            {
                if(this.zoom == null || r.zoom == null || !this.zoom.equals(r.zoom))
                {
                    return false;
                }
            }
            if(this.transX != r.transX)
            {
                return false;
            }
            if(this.transY != r.transY)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::Devices::LensPosition");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, zoom);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, transX);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, transY);
        return h_;
    }

    public LensPosition clone()
    {
        LensPosition c = null;
        try
        {
            c = (LensPosition)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        Zoom.ice_write(ostr, this.zoom);
        ostr.writeInt(this.transX);
        ostr.writeInt(this.transY);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.zoom = Zoom.ice_read(istr);
        this.transX = istr.readInt();
        this.transY = istr.readInt();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, LensPosition v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public LensPosition ice_read(com.zeroc.Ice.InputStream istr)
    {
        LensPosition v = new LensPosition();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<LensPosition> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, LensPosition v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<LensPosition> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(LensPosition.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final LensPosition _nullMarshalValue = new LensPosition();

    /** @hidden */
    public static final long serialVersionUID = -7956732642812668196L;
}
